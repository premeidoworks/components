// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package kanatasupport

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	MsgBody  []byte  `protobuf:"bytes,1,req,name=msgBody" json:"msgBody"`
	MsgOutId *string `protobuf:"bytes,2,opt,name=msgOutId" json:"msgOutId,omitempty"`
	MsgId    *string `protobuf:"bytes,3,opt,name=msgId" json:"msgId,omitempty"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

func (m *Message) GetMsgOutId() string {
	if m != nil && m.MsgOutId != nil {
		return *m.MsgOutId
	}
	return ""
}

func (m *Message) GetMsgId() string {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return ""
}

type MessageId struct {
	MsgId    *string `protobuf:"bytes,1,opt,name=msgId" json:"msgId,omitempty"`
	MsgOutId *string `protobuf:"bytes,2,opt,name=msgOutId" json:"msgOutId,omitempty"`
}

func (m *MessageId) Reset()      { *m = MessageId{} }
func (*MessageId) ProtoMessage() {}
func (*MessageId) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *MessageId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageId.Merge(m, src)
}
func (m *MessageId) XXX_Size() int {
	return m.Size()
}
func (m *MessageId) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageId.DiscardUnknown(m)
}

var xxx_messageInfo_MessageId proto.InternalMessageInfo

func (m *MessageId) GetMsgId() string {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return ""
}

func (m *MessageId) GetMsgOutId() string {
	if m != nil && m.MsgOutId != nil {
		return *m.MsgOutId
	}
	return ""
}

type SuccessMessageId struct {
	MsgId    *string `protobuf:"bytes,1,opt,name=msgId" json:"msgId,omitempty"`
	MsgOutId *string `protobuf:"bytes,2,opt,name=msgOutId" json:"msgOutId,omitempty"`
}

func (m *SuccessMessageId) Reset()      { *m = SuccessMessageId{} }
func (*SuccessMessageId) ProtoMessage() {}
func (*SuccessMessageId) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{2}
}
func (m *SuccessMessageId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuccessMessageId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuccessMessageId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuccessMessageId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuccessMessageId.Merge(m, src)
}
func (m *SuccessMessageId) XXX_Size() int {
	return m.Size()
}
func (m *SuccessMessageId) XXX_DiscardUnknown() {
	xxx_messageInfo_SuccessMessageId.DiscardUnknown(m)
}

var xxx_messageInfo_SuccessMessageId proto.InternalMessageInfo

func (m *SuccessMessageId) GetMsgId() string {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return ""
}

func (m *SuccessMessageId) GetMsgOutId() string {
	if m != nil && m.MsgOutId != nil {
		return *m.MsgOutId
	}
	return ""
}

type FailMessageId struct {
	MsgId    *string `protobuf:"bytes,1,opt,name=msgId" json:"msgId,omitempty"`
	MsgOutId *string `protobuf:"bytes,2,opt,name=msgOutId" json:"msgOutId,omitempty"`
	Code     *string `protobuf:"bytes,3,opt,name=code" json:"code,omitempty"`
}

func (m *FailMessageId) Reset()      { *m = FailMessageId{} }
func (*FailMessageId) ProtoMessage() {}
func (*FailMessageId) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{3}
}
func (m *FailMessageId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FailMessageId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FailMessageId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FailMessageId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FailMessageId.Merge(m, src)
}
func (m *FailMessageId) XXX_Size() int {
	return m.Size()
}
func (m *FailMessageId) XXX_DiscardUnknown() {
	xxx_messageInfo_FailMessageId.DiscardUnknown(m)
}

var xxx_messageInfo_FailMessageId proto.InternalMessageInfo

func (m *FailMessageId) GetMsgId() string {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return ""
}

func (m *FailMessageId) GetMsgOutId() string {
	if m != nil && m.MsgOutId != nil {
		return *m.MsgOutId
	}
	return ""
}

func (m *FailMessageId) GetCode() string {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return ""
}

type PublishRequest struct {
	Topic       string     `protobuf:"bytes,1,req,name=topic" json:"topic"`
	MessageList []*Message `protobuf:"bytes,2,rep,name=messageList" json:"messageList,omitempty"`
}

func (m *PublishRequest) Reset()      { *m = PublishRequest{} }
func (*PublishRequest) ProtoMessage() {}
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{4}
}
func (m *PublishRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishRequest.Merge(m, src)
}
func (m *PublishRequest) XXX_Size() int {
	return m.Size()
}
func (m *PublishRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublishRequest proto.InternalMessageInfo

func (m *PublishRequest) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *PublishRequest) GetMessageList() []*Message {
	if m != nil {
		return m.MessageList
	}
	return nil
}

type PublishResponse struct {
	SuccessIdList []*SuccessMessageId `protobuf:"bytes,1,rep,name=successIdList" json:"successIdList,omitempty"`
	FailIdList    []*FailMessageId    `protobuf:"bytes,2,rep,name=failIdList" json:"failIdList,omitempty"`
}

func (m *PublishResponse) Reset()      { *m = PublishResponse{} }
func (*PublishResponse) ProtoMessage() {}
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{5}
}
func (m *PublishResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublishResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublishResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublishResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublishResponse.Merge(m, src)
}
func (m *PublishResponse) XXX_Size() int {
	return m.Size()
}
func (m *PublishResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublishResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublishResponse proto.InternalMessageInfo

func (m *PublishResponse) GetSuccessIdList() []*SuccessMessageId {
	if m != nil {
		return m.SuccessIdList
	}
	return nil
}

func (m *PublishResponse) GetFailIdList() []*FailMessageId {
	if m != nil {
		return m.FailIdList
	}
	return nil
}

func init() {
	proto.RegisterType((*Message)(nil), "kanatasupport.Message")
	proto.RegisterType((*MessageId)(nil), "kanatasupport.MessageId")
	proto.RegisterType((*SuccessMessageId)(nil), "kanatasupport.SuccessMessageId")
	proto.RegisterType((*FailMessageId)(nil), "kanatasupport.FailMessageId")
	proto.RegisterType((*PublishRequest)(nil), "kanatasupport.PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "kanatasupport.PublishResponse")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4e, 0xc2, 0x40,
	0x10, 0x86, 0xbb, 0x80, 0x41, 0x06, 0xab, 0xa6, 0x46, 0xd2, 0x18, 0xb3, 0x90, 0x9e, 0x48, 0x8c,
	0x85, 0x78, 0x30, 0xde, 0x4c, 0x38, 0x98, 0x34, 0x91, 0x48, 0xf0, 0x09, 0x4a, 0x5b, 0x96, 0x46,
	0xca, 0x56, 0x66, 0xf7, 0x60, 0xbc, 0xf8, 0x08, 0x3e, 0x86, 0x8f, 0xe0, 0x23, 0x70, 0xe4, 0xc8,
	0xc9, 0x48, 0x79, 0x01, 0x8f, 0x1e, 0x8d, 0xdb, 0x46, 0x04, 0xe3, 0x85, 0x5b, 0x67, 0x32, 0xdf,
	0xd7, 0x9d, 0x7f, 0x40, 0x8f, 0x02, 0x44, 0x97, 0x05, 0x76, 0x3c, 0xe6, 0x82, 0x1b, 0xfa, 0x9d,
	0x3b, 0x72, 0x85, 0x8b, 0x32, 0x8e, 0xf9, 0x58, 0x1c, 0x9d, 0xb2, 0x50, 0x0c, 0x64, 0xcf, 0xf6,
	0x78, 0xd4, 0x60, 0x9c, 0xf1, 0x86, 0x9a, 0xea, 0xc9, 0xbe, 0xaa, 0x54, 0xa1, 0xbe, 0x52, 0xda,
	0x6a, 0x43, 0xb1, 0x9d, 0xea, 0x8c, 0x43, 0x28, 0x46, 0xc8, 0x5a, 0xdc, 0x7f, 0x30, 0x49, 0x2d,
	0x57, 0xdf, 0x69, 0x15, 0x26, 0x6f, 0x55, 0xcd, 0xa8, 0xc0, 0x76, 0x84, 0xec, 0x46, 0x0a, 0xc7,
	0x37, 0x73, 0x35, 0x52, 0x2f, 0xa9, 0x3e, 0x31, 0x0e, 0x60, 0x2b, 0x42, 0xe6, 0xf8, 0x66, 0x7e,
	0xd9, 0xb4, 0x2e, 0xa0, 0x94, 0xe9, 0x1c, 0x7f, 0x39, 0x41, 0x7e, 0x61, 0xff, 0xe8, 0xac, 0x4b,
	0xd8, 0xbf, 0x95, 0x9e, 0x17, 0x20, 0x6e, 0x28, 0xe8, 0x80, 0x7e, 0xe5, 0x86, 0xc3, 0xcd, 0x68,
	0xc3, 0x80, 0x82, 0xc7, 0xfd, 0x60, 0x65, 0x99, 0x2e, 0xec, 0x76, 0x64, 0x6f, 0x18, 0xe2, 0xa0,
	0x1b, 0xdc, 0xcb, 0x00, 0xc5, 0xb7, 0x52, 0xf0, 0x38, 0xf4, 0x54, 0x40, 0xa5, 0x2c, 0xa0, 0x13,
	0x28, 0x67, 0x17, 0xb9, 0x0e, 0x51, 0x98, 0xb9, 0x5a, 0xbe, 0x5e, 0x3e, 0xab, 0xd8, 0x2b, 0x67,
	0xb1, 0xb3, 0x67, 0x59, 0x8f, 0xb0, 0xf7, 0xe3, 0xc4, 0x98, 0x8f, 0x30, 0x30, 0xce, 0x41, 0xc7,
	0x74, 0x73, 0xc7, 0x57, 0x06, 0xa2, 0x0c, 0xd5, 0x35, 0xc3, 0x9f, 0x74, 0x9a, 0x00, 0x7d, 0x37,
	0x1c, 0x66, 0x50, 0xfa, 0xdb, 0xe3, 0x35, 0x68, 0x25, 0x91, 0x56, 0x73, 0x36, 0xa7, 0xda, 0xc7,
	0x9c, 0x92, 0xcf, 0x39, 0x25, 0x4f, 0x09, 0x25, 0x2f, 0x09, 0x25, 0xaf, 0x09, 0x25, 0x93, 0x84,
	0x92, 0x69, 0x42, 0xc9, 0x7b, 0x42, 0xc9, 0xf3, 0x82, 0x6a, 0xd3, 0x05, 0xd5, 0x66, 0x0b, 0xaa,
	0x7d, 0x05, 0x00, 0x00, 0xff, 0xff, 0x04, 0xf6, 0x6d, 0x2c, 0x6c, 0x02, 0x00, 0x00,
}

func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.MsgBody, that1.MsgBody) {
		return false
	}
	if this.MsgOutId != nil && that1.MsgOutId != nil {
		if *this.MsgOutId != *that1.MsgOutId {
			return false
		}
	} else if this.MsgOutId != nil {
		return false
	} else if that1.MsgOutId != nil {
		return false
	}
	if this.MsgId != nil && that1.MsgId != nil {
		if *this.MsgId != *that1.MsgId {
			return false
		}
	} else if this.MsgId != nil {
		return false
	} else if that1.MsgId != nil {
		return false
	}
	return true
}
func (this *MessageId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MessageId)
	if !ok {
		that2, ok := that.(MessageId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgId != nil && that1.MsgId != nil {
		if *this.MsgId != *that1.MsgId {
			return false
		}
	} else if this.MsgId != nil {
		return false
	} else if that1.MsgId != nil {
		return false
	}
	if this.MsgOutId != nil && that1.MsgOutId != nil {
		if *this.MsgOutId != *that1.MsgOutId {
			return false
		}
	} else if this.MsgOutId != nil {
		return false
	} else if that1.MsgOutId != nil {
		return false
	}
	return true
}
func (this *SuccessMessageId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuccessMessageId)
	if !ok {
		that2, ok := that.(SuccessMessageId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgId != nil && that1.MsgId != nil {
		if *this.MsgId != *that1.MsgId {
			return false
		}
	} else if this.MsgId != nil {
		return false
	} else if that1.MsgId != nil {
		return false
	}
	if this.MsgOutId != nil && that1.MsgOutId != nil {
		if *this.MsgOutId != *that1.MsgOutId {
			return false
		}
	} else if this.MsgOutId != nil {
		return false
	} else if that1.MsgOutId != nil {
		return false
	}
	return true
}
func (this *FailMessageId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FailMessageId)
	if !ok {
		that2, ok := that.(FailMessageId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MsgId != nil && that1.MsgId != nil {
		if *this.MsgId != *that1.MsgId {
			return false
		}
	} else if this.MsgId != nil {
		return false
	} else if that1.MsgId != nil {
		return false
	}
	if this.MsgOutId != nil && that1.MsgOutId != nil {
		if *this.MsgOutId != *that1.MsgOutId {
			return false
		}
	} else if this.MsgOutId != nil {
		return false
	} else if that1.MsgOutId != nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	return true
}
func (this *PublishRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishRequest)
	if !ok {
		that2, ok := that.(PublishRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Topic != that1.Topic {
		return false
	}
	if len(this.MessageList) != len(that1.MessageList) {
		return false
	}
	for i := range this.MessageList {
		if !this.MessageList[i].Equal(that1.MessageList[i]) {
			return false
		}
	}
	return true
}
func (this *PublishResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublishResponse)
	if !ok {
		that2, ok := that.(PublishResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.SuccessIdList) != len(that1.SuccessIdList) {
		return false
	}
	for i := range this.SuccessIdList {
		if !this.SuccessIdList[i].Equal(that1.SuccessIdList[i]) {
			return false
		}
	}
	if len(this.FailIdList) != len(that1.FailIdList) {
		return false
	}
	for i := range this.FailIdList {
		if !this.FailIdList[i].Equal(that1.FailIdList[i]) {
			return false
		}
	}
	return true
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&kanatasupport.Message{")
	s = append(s, "MsgBody: "+fmt.Sprintf("%#v", this.MsgBody)+",\n")
	if this.MsgOutId != nil {
		s = append(s, "MsgOutId: "+valueToGoStringMessage(this.MsgOutId, "string")+",\n")
	}
	if this.MsgId != nil {
		s = append(s, "MsgId: "+valueToGoStringMessage(this.MsgId, "string")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *MessageId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&kanatasupport.MessageId{")
	if this.MsgId != nil {
		s = append(s, "MsgId: "+valueToGoStringMessage(this.MsgId, "string")+",\n")
	}
	if this.MsgOutId != nil {
		s = append(s, "MsgOutId: "+valueToGoStringMessage(this.MsgOutId, "string")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SuccessMessageId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&kanatasupport.SuccessMessageId{")
	if this.MsgId != nil {
		s = append(s, "MsgId: "+valueToGoStringMessage(this.MsgId, "string")+",\n")
	}
	if this.MsgOutId != nil {
		s = append(s, "MsgOutId: "+valueToGoStringMessage(this.MsgOutId, "string")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FailMessageId) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&kanatasupport.FailMessageId{")
	if this.MsgId != nil {
		s = append(s, "MsgId: "+valueToGoStringMessage(this.MsgId, "string")+",\n")
	}
	if this.MsgOutId != nil {
		s = append(s, "MsgOutId: "+valueToGoStringMessage(this.MsgOutId, "string")+",\n")
	}
	if this.Code != nil {
		s = append(s, "Code: "+valueToGoStringMessage(this.Code, "string")+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&kanatasupport.PublishRequest{")
	s = append(s, "Topic: "+fmt.Sprintf("%#v", this.Topic)+",\n")
	if this.MessageList != nil {
		s = append(s, "MessageList: "+fmt.Sprintf("%#v", this.MessageList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PublishResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&kanatasupport.PublishResponse{")
	if this.SuccessIdList != nil {
		s = append(s, "SuccessIdList: "+fmt.Sprintf("%#v", this.SuccessIdList)+",\n")
	}
	if this.FailIdList != nil {
		s = append(s, "FailIdList: "+fmt.Sprintf("%#v", this.FailIdList)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMessage(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgBody != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MsgBody)))
		i += copy(dAtA[i:], m.MsgBody)
	}
	if m.MsgOutId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgOutId)))
		i += copy(dAtA[i:], *m.MsgOutId)
	}
	if m.MsgId != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgId)))
		i += copy(dAtA[i:], *m.MsgId)
	}
	return i, nil
}

func (m *MessageId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgId)))
		i += copy(dAtA[i:], *m.MsgId)
	}
	if m.MsgOutId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgOutId)))
		i += copy(dAtA[i:], *m.MsgOutId)
	}
	return i, nil
}

func (m *SuccessMessageId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuccessMessageId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgId)))
		i += copy(dAtA[i:], *m.MsgId)
	}
	if m.MsgOutId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgOutId)))
		i += copy(dAtA[i:], *m.MsgOutId)
	}
	return i, nil
}

func (m *FailMessageId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FailMessageId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MsgId != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgId)))
		i += copy(dAtA[i:], *m.MsgId)
	}
	if m.MsgOutId != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.MsgOutId)))
		i += copy(dAtA[i:], *m.MsgOutId)
	}
	if m.Code != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(*m.Code)))
		i += copy(dAtA[i:], *m.Code)
	}
	return i, nil
}

func (m *PublishRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintMessage(dAtA, i, uint64(len(m.Topic)))
	i += copy(dAtA[i:], m.Topic)
	if len(m.MessageList) > 0 {
		for _, msg := range m.MessageList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *PublishResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublishResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SuccessIdList) > 0 {
		for _, msg := range m.SuccessIdList {
			dAtA[i] = 0xa
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.FailIdList) > 0 {
		for _, msg := range m.FailIdList {
			dAtA[i] = 0x12
			i++
			i = encodeVarintMessage(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedMessage(r randyMessage, easy bool) *Message {
	this := &Message{}
	v1 := r.Intn(100)
	this.MsgBody = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.MsgBody[i] = byte(r.Intn(256))
	}
	if r.Intn(10) != 0 {
		v2 := string(randStringMessage(r))
		this.MsgOutId = &v2
	}
	if r.Intn(10) != 0 {
		v3 := string(randStringMessage(r))
		this.MsgId = &v3
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedMessageId(r randyMessage, easy bool) *MessageId {
	this := &MessageId{}
	if r.Intn(10) != 0 {
		v4 := string(randStringMessage(r))
		this.MsgId = &v4
	}
	if r.Intn(10) != 0 {
		v5 := string(randStringMessage(r))
		this.MsgOutId = &v5
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSuccessMessageId(r randyMessage, easy bool) *SuccessMessageId {
	this := &SuccessMessageId{}
	if r.Intn(10) != 0 {
		v6 := string(randStringMessage(r))
		this.MsgId = &v6
	}
	if r.Intn(10) != 0 {
		v7 := string(randStringMessage(r))
		this.MsgOutId = &v7
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedFailMessageId(r randyMessage, easy bool) *FailMessageId {
	this := &FailMessageId{}
	if r.Intn(10) != 0 {
		v8 := string(randStringMessage(r))
		this.MsgId = &v8
	}
	if r.Intn(10) != 0 {
		v9 := string(randStringMessage(r))
		this.MsgOutId = &v9
	}
	if r.Intn(10) != 0 {
		v10 := string(randStringMessage(r))
		this.Code = &v10
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishRequest(r randyMessage, easy bool) *PublishRequest {
	this := &PublishRequest{}
	this.Topic = string(randStringMessage(r))
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.MessageList = make([]*Message, v11)
		for i := 0; i < v11; i++ {
			this.MessageList[i] = NewPopulatedMessage(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedPublishResponse(r randyMessage, easy bool) *PublishResponse {
	this := &PublishResponse{}
	if r.Intn(10) != 0 {
		v12 := r.Intn(5)
		this.SuccessIdList = make([]*SuccessMessageId, v12)
		for i := 0; i < v12; i++ {
			this.SuccessIdList[i] = NewPopulatedSuccessMessageId(r, easy)
		}
	}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.FailIdList = make([]*FailMessageId, v13)
		for i := 0; i < v13; i++ {
			this.FailIdList[i] = NewPopulatedFailMessageId(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyMessage interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneMessage(r randyMessage) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringMessage(r randyMessage) string {
	v14 := r.Intn(100)
	tmps := make([]rune, v14)
	for i := 0; i < v14; i++ {
		tmps[i] = randUTF8RuneMessage(r)
	}
	return string(tmps)
}
func randUnrecognizedMessage(r randyMessage, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldMessage(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldMessage(dAtA []byte, r randyMessage, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		v15 := r.Int63()
		if r.Intn(2) == 0 {
			v15 *= -1
		}
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(v15))
	case 1:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateMessage(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateMessage(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgBody != nil {
		l = len(m.MsgBody)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgOutId != nil {
		l = len(*m.MsgOutId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgId != nil {
		l = len(*m.MsgId)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *MessageId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != nil {
		l = len(*m.MsgId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgOutId != nil {
		l = len(*m.MsgOutId)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *SuccessMessageId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != nil {
		l = len(*m.MsgId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgOutId != nil {
		l = len(*m.MsgOutId)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *FailMessageId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgId != nil {
		l = len(*m.MsgId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgOutId != nil {
		l = len(*m.MsgOutId)
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Code != nil {
		l = len(*m.Code)
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *PublishRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	n += 1 + l + sovMessage(uint64(l))
	if len(m.MessageList) > 0 {
		for _, e := range m.MessageList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func (m *PublishResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuccessIdList) > 0 {
		for _, e := range m.SuccessIdList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	if len(m.FailIdList) > 0 {
		for _, e := range m.FailIdList {
			l = e.Size()
			n += 1 + l + sovMessage(uint64(l))
		}
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`MsgBody:` + fmt.Sprintf("%v", this.MsgBody) + `,`,
		`MsgOutId:` + valueToStringMessage(this.MsgOutId) + `,`,
		`MsgId:` + valueToStringMessage(this.MsgId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *MessageId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MessageId{`,
		`MsgId:` + valueToStringMessage(this.MsgId) + `,`,
		`MsgOutId:` + valueToStringMessage(this.MsgOutId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SuccessMessageId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SuccessMessageId{`,
		`MsgId:` + valueToStringMessage(this.MsgId) + `,`,
		`MsgOutId:` + valueToStringMessage(this.MsgOutId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FailMessageId) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FailMessageId{`,
		`MsgId:` + valueToStringMessage(this.MsgId) + `,`,
		`MsgOutId:` + valueToStringMessage(this.MsgOutId) + `,`,
		`Code:` + valueToStringMessage(this.Code) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishRequest{`,
		`Topic:` + fmt.Sprintf("%v", this.Topic) + `,`,
		`MessageList:` + strings.Replace(fmt.Sprintf("%v", this.MessageList), "Message", "Message", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PublishResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PublishResponse{`,
		`SuccessIdList:` + strings.Replace(fmt.Sprintf("%v", this.SuccessIdList), "SuccessMessageId", "SuccessMessageId", 1) + `,`,
		`FailIdList:` + strings.Replace(fmt.Sprintf("%v", this.FailIdList), "FailMessageId", "FailMessageId", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMessage(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Message) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgBody = append(m.MsgBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgBody == nil {
				m.MsgBody = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgOutId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("msgBody")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgOutId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuccessMessageId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuccessMessageId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuccessMessageId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgOutId = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FailMessageId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailMessageId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailMessageId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgId = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgOutId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.MsgOutId = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Code = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishRequest) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageList = append(m.MessageList, &Message{})
			if err := m.MessageList[len(m.MessageList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("topic")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublishResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublishResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublishResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuccessIdList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuccessIdList = append(m.SuccessIdList, &SuccessMessageId{})
			if err := m.SuccessIdList[len(m.SuccessIdList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailIdList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailIdList = append(m.FailIdList, &FailMessageId{})
			if err := m.FailIdList[len(m.FailIdList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMessage
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)
